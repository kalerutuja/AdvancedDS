package com.bhole.advanced_ds.random.medium;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.IntStream;

public class SumDivisibleByP {
    public int minSubarray(int[] nums, int p) {
        if (nums.length == 0) return -1;
        long sum = Arrays.stream(nums).asLongStream().sum();
        if (sum%p == 0) return 0;
        if (nums.length == 1) return -1;

        Map<Tuple, Integer> map = new HashMap<>();
        for (int len=0; len<nums.length-2; len++) {
            for (int i=0; (i+len)<nums.length; i++) {
                if (len == 0) {
                    map.put(new Tuple(i, i), nums[i]);
                } else {
                    Tuple cur = new Tuple(i, i+len-1);
                    int subArrSum = map.get(cur) + nums[i+len];
                    if ((sum-subArrSum) % p == 0) {
                        return (len+1);
                    } else {
                        map.put(new Tuple(i, i+len), subArrSum);
                    }
                }
            }
        }
        return -1;
    }
    public static void main(String args[]) {
        SumDivisibleByP sumDivisibleByP = new SumDivisibleByP();
        int arr[] = {934,5630,5553,3429,1735,9163,1651,1615,1392,8833,7932,202,7357,5975,5975,6578,1775,1055,4708,6020,7854,1655,4357,9100,7675,2787,5636,4190,4405,212,5657,5238,2646,7875,1208,8446,8171,2215,8386,4097,1862,8287,69,641,921,1591,4106,6631,7761,2396,3228,5380,4482,8144,3467,4206,5956,5590,5345,3309,1283,4937,6023,5425,8377,8082,1830,4971,2224,5616,4342,7887,7617,2595,4128,7084,2300,7732,8210,841,4212,5728,9397,3730,4272,6009,1801,6355,5134,5538,9484,8346,6368,7019,6942,174,3088,7587,8426,4565,5570,4743,6285,8346,4144,1502,5948,5565,5056,2006,9267,5515,678,5746,8999,9065,845,402,4211,1404,6893,4589,2328,51,7767,2293,7952,278,968,9518,4518,9506,9338,2287,5676,9004,7854,7467,3879,433,3674,2140,8726,361,7608,5321,2688,543,766,2445,2857,8697,3081,7063,4695,6360,9006,6967,5450,7748,4575,7849,7939,1262,5599,4253,8867,7942,1482,3527,1034,596,340,3977,6317,1926,2014,9014,1723,2749,1750,5704,5655,4366,854,2843,4442,4937,2097,6516,398,9265,2426,148,8209,2425,8462,8409,8377,4813,480,6676,895,6612,2989,1580,1140,5569,9141,2640,5966,461,7921,9308,3455,7511,2690,1680,5994,3019,1666,6493,5717,7212,2958,1365,3398,8362,6330,5255,1051,2108,2163,6285,3973,6184,3246,2873,1962,793,1669,6418,1315,2403,6976,6224,7384,5128,8822,2834,5978,2302,1149,5267,3996,5557,4975,2906,7413,8374,4437,6971,2527,2361,6152,2224,8168,2549,3945,2980,6264,2551,7020,5152,4733,209,3810,6170,1222,3635,4458,9232,7498,3594,3737,3353,4950,3830,5879,6738,3220,9176,7258,9232,6460,5718,8532,8253,1866,7470,6529,1766,4750,2640,6063,3924,8371,2659,27,6447,6145,6733,6137,5139,1711,5624,5869,8490,7812,9053,1614,8340,2475,1645,4145,5440,8396,3961,8364,5330,5865,6610,8161,4839,1562,785,8449,5930,2067,1165,157,9439,9264,882,1957,6231,7143,5423,6460,2895,9325,2262,3712,7726,1081,616,3796,4250,9457,7013,6757,6213,8689,5700,3088,6152,381,2650,7950,4130,3896,5909,7533,6315,1145,3870,6966,8357,1429,7955,8342,6224,5039,5304,7250,6499,2207,4277,8589,8382,963,8279,4303,8977,4042,4675,9315,2580,8773,7396,5523,3371,2050,2241,2610,4190,3806,2697,1097,175,4107,484,6368,4649,3374,9283,3224,3670,7802,793,6670,7282,7952,1092,3268,8376,8239,4310,1614,1496,1866,1440,9191,2041,8158,3822,7833,1572,3291,8835,8557,2154,8298,651,3043,2077,1916,3073,4560,79,4251,6507,7731,7323,5300,1835,5136,2077,4732,5117,9472,9198,8956,7668,3155,5024,4615,8195,2305,4314,7753,8108,6979,7914,4537,1019,64,6858,7362,3901,4179,2834,8768,3313,2371,7015,1124,2367,5495,6323,6547,7030,341,3991,3792,4748,748,9440,7717,4348,4732,2091,8014,5035,7498,6431,6883,4574,674,9205,9405,6010,765,8362,553,8755,4516,2201,7095,8788,2676,5005,441,7540,5998,5982,2655,5693,6578,962,7238,5504,236,9457,115,1290,837,4686,919,801,8647,6626,2022,7759,4746,1027,2283,2980,7762,2106,7956,7591,535,4471,1374,5527,6903,1571,8527,73,1051,5363,3474,2962,3889,8526,2416,3287,2127,7986,1444,931,3554,3171,272,5030,3675,60,7088,9335,9036,8095,7720,5615,6806,3397,1081,5383,8727,7486,6824,3699,7556,5678,5522,3959,2449,9130,7245,6572,5729,3724,7015,8712,3129,7536,180,8681,633,2504,8268,1607,107,517,2551,7169,1228,2106,8692,6170,5395,7820,6852,6970,7883,2478,6350,7338,5802,5208,3567,7297,1032,5959,861,9100,3262,6254,2944,4835,9196,5801,845,4301,8232,4462,3900,4501,4960,8842,8963,6119,7936,8622,5667,1864,5594,8994,5264,6536,8166,4937,8283,1487,4177,4464,8979,1078,3850,906,6522,7290,3944,2771,6611,3497,7921,2417,3226,4542,7998,630,8184,888,6136,4936,3968,7632,4177,3426,3204,8694,3585,5648,5568,748,1835,5347,581,6720,1378,7174,9392,8516,4018,5169,190,9464,2809,4206,578,214,3481,1793,5821,5578,5885,335,4629,2553,1183,3225,6886,8765,1219,7369,4708,1287,4309,9179,905,8259,7364,1245,6646,7717,2961,4682,9076,6791,4390,7206,7451,7276,8042,897,5923,8387,616,5653,2962,1775,6981,5501,6639,4466,7949,1776,8114,6347,8199,8586,8149,6354,1505,6576,5502,2048,5516,1861,6458,5787,707,2173,7172,7986,5737,5513,49,734,7152,843,2731,5211,8447,8251,9288,7783,4711,6897,8408,5996,7524,9254,1191,7287,6452,5434,9491,7738,628,4300,6141,567,343,4397,2449,2058,8009,5169,1833,365,7025,6675,5056,6990,5693,5936,2349,816,6105,8155,3038,5885,2457,8179,34,9453,8156,5588,8404,5432,7734,5083,9379,4250,2730,4752,2226,9084,2968,6605,3201,7019,3820,5487,2644,7375,3769,9314,4495,7350,309,2816,3754,3870,1054,8944,4280,766,3191,4424,3299,8833,8979,451,6998,4152,7554,4374,5469,8954,40,4357,1033,1550,203,9227,8399,7954,4403,237,2605,5327,4505,8748,6402,6587,3188,952,5041,3684,3708,6515,3131,8549,3938,1413,7614,39,3475,7170,6037,9037,9434,8262,5446,2171,4103,3214,953,2853,3442,2179,8298,8935,9134,8993,7383,4517,8326,231,1865,4251,1723,6186,3068,7349,7246,5811,491,6328,2854,3792,4810,4374,6364,1391,5559,1701,1645,2420,3529,4406,1629,6297,9261,3177,9402,5053,2449,3556};
        System.out.println(sumDivisibleByP.minSubarray(arr, 3361758));

    }

}
